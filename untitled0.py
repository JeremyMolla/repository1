# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BGV8QJuDT1-xupj29M_F9SVtMTxRo_PZ
"""

#Description: This is a Monty Hall Simulation



#Import the libraries
import random
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Creat a function for the host to reveal a door that doesn't contain 
#the prize and the door that isn't the contestants/players original choice

def get_non_prize_door(host,num_doors,player_choice):
  i = 1
  while(i==host or i == player_choice):
    i = (i+1)%(num_doors)

  return i

#Create a function to have the player switch to the other unopened door
def switch_fucntion(shown_door,num_doors,player_choice):
  i=1
  while(i==shown_door or i==player_choice):
    i=(i+1)%(num_doors)

  return i

#Creat a function to simulate the game
def monty_hall_game(switch,num_tests):
  win_switch_cnt = 0
  win_no_switch_cnt = 0
  lose_switch_cnt = 0
  lose_no_switch_cnt = 0

  doors = [0,1,2]
  num_doors = len(doors)

  #Loop through the number of times the constestant/player can play the game
  for i in range(0,num_tests):
    door_with_prize = random.randint(0,num_doors-1) #Randomly choose a door between [0,2]:
    host = door_with_prize
    player_choice = random.randint(0,num_doors-1)
    original_player_choice = player_choice
    shown_door = get_non_prize_door(host,num_doors,player_choice)

    #if the player chooses to always switch, then allow the player to switch their original chosen door to the other unopened door
    if switch == True:
      player_choice = switch_fucntion(shown_door,num_doors,player_choice)

    if player_choice == door_with_prize and switch == False:
      #Then the players wins from not switching
      print('Player wins (No switch) - The player chose dooor #',player_choice,'Original door choice:',original_player_choice,'Door with prize:',door_with_prize,'Shown door:',shown_door)
      win_no_switch_cnt = win_no_switch_cnt + 1
    elif player_choice == door_with_prize and switch == True:
      #Then the players wins from switching
      print('Player wins (switch) - The player chose dooor #',player_choice,'Original door choice:',original_player_choice,'Door with prize:',door_with_prize,'Shown door:',shown_door)
      win_switch_cnt = win_switch_cnt + 1
    elif player_choice != door_with_prize and switch == False:
      #Then the players lost from not switching
      print('Player lost (No switch) - The player chose dooor #',player_choice,'Original door choice:',original_player_choice,'Door with prize:',door_with_prize,'Shown door:',shown_door)
      lose_no_switch_cnt = lose_no_switch_cnt + 1
    elif player_choice != door_with_prize and switch == True:
      #Then the players lost from switching
      print('Player lost (switch) - The player chose dooor #',player_choice,'Original door choice:',original_player_choice,'Door with prize:',door_with_prize,'Shown door:',shown_door)
      lose_switch_cnt = lose_switch_cnt + 1
    else:
      print('Something is wrong')

  return win_no_switch_cnt, win_switch_cnt, lose_no_switch_cnt, lose_switch_cnt, num_tests

#Play the game
x = monty_hall_game(True,10) # x = [win_no_switch_cnt, win_switch_cnt, lose_no_switch_cnt, lose_switch_cnt, num_tests]

x

#Get the win & lost percentage for switching or not switching
print('win switch %:', x[1]/x[4])
print('lose switch %:', x[3]/x[4])
print('win no switch %:', x[0]/x[4])
print('lose no switch %:', x[2]/x[4])